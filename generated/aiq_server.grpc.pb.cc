// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: aiq_server.proto

#include "aiq_server.pb.h"
#include "aiq_server.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* AiqTranslationServer_method_names[] = {
  "/AiqTranslationServer/Translate",
  "/AiqTranslationServer/SourceLanguage",
};

std::unique_ptr< AiqTranslationServer::Stub> AiqTranslationServer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AiqTranslationServer::Stub> stub(new AiqTranslationServer::Stub(channel));
  return stub;
}

AiqTranslationServer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Translate_(AiqTranslationServer_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SourceLanguage_(AiqTranslationServer_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AiqTranslationServer::Stub::Translate(::grpc::ClientContext* context, const ::Translatable& request, ::Translation* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Translate_, context, request, response);
}

void AiqTranslationServer::Stub::experimental_async::Translate(::grpc::ClientContext* context, const ::Translatable* request, ::Translation* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Translate_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::Translation>* AiqTranslationServer::Stub::AsyncTranslateRaw(::grpc::ClientContext* context, const ::Translatable& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Translation>::Create(channel_.get(), cq, rpcmethod_Translate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Translation>* AiqTranslationServer::Stub::PrepareAsyncTranslateRaw(::grpc::ClientContext* context, const ::Translatable& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Translation>::Create(channel_.get(), cq, rpcmethod_Translate_, context, request, false);
}

::grpc::Status AiqTranslationServer::Stub::SourceLanguage(::grpc::ClientContext* context, const ::Source& request, ::Language* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SourceLanguage_, context, request, response);
}

void AiqTranslationServer::Stub::experimental_async::SourceLanguage(::grpc::ClientContext* context, const ::Source* request, ::Language* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SourceLanguage_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::Language>* AiqTranslationServer::Stub::AsyncSourceLanguageRaw(::grpc::ClientContext* context, const ::Source& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Language>::Create(channel_.get(), cq, rpcmethod_SourceLanguage_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Language>* AiqTranslationServer::Stub::PrepareAsyncSourceLanguageRaw(::grpc::ClientContext* context, const ::Source& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Language>::Create(channel_.get(), cq, rpcmethod_SourceLanguage_, context, request, false);
}

AiqTranslationServer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AiqTranslationServer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AiqTranslationServer::Service, ::Translatable, ::Translation>(
          std::mem_fn(&AiqTranslationServer::Service::Translate), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AiqTranslationServer_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AiqTranslationServer::Service, ::Source, ::Language>(
          std::mem_fn(&AiqTranslationServer::Service::SourceLanguage), this)));
}

AiqTranslationServer::Service::~Service() {
}

::grpc::Status AiqTranslationServer::Service::Translate(::grpc::ServerContext* context, const ::Translatable* request, ::Translation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AiqTranslationServer::Service::SourceLanguage(::grpc::ServerContext* context, const ::Source* request, ::Language* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


