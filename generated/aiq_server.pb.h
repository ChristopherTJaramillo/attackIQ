// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aiq_server.proto

#ifndef PROTOBUF_INCLUDED_aiq_5fserver_2eproto
#define PROTOBUF_INCLUDED_aiq_5fserver_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_aiq_5fserver_2eproto 

namespace protobuf_aiq_5fserver_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_aiq_5fserver_2eproto
class Language;
class LanguageDefaultTypeInternal;
extern LanguageDefaultTypeInternal _Language_default_instance_;
class Source;
class SourceDefaultTypeInternal;
extern SourceDefaultTypeInternal _Source_default_instance_;
class Translatable;
class TranslatableDefaultTypeInternal;
extern TranslatableDefaultTypeInternal _Translatable_default_instance_;
class Translation;
class TranslationDefaultTypeInternal;
extern TranslationDefaultTypeInternal _Translation_default_instance_;
namespace google {
namespace protobuf {
template<> ::Language* Arena::CreateMaybeMessage<::Language>(Arena*);
template<> ::Source* Arena::CreateMaybeMessage<::Source>(Arena*);
template<> ::Translatable* Arena::CreateMaybeMessage<::Translatable>(Arena*);
template<> ::Translation* Arena::CreateMaybeMessage<::Translation>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class Translatable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Translatable) */ {
 public:
  Translatable();
  virtual ~Translatable();

  Translatable(const Translatable& from);

  inline Translatable& operator=(const Translatable& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Translatable(Translatable&& from) noexcept
    : Translatable() {
    *this = ::std::move(from);
  }

  inline Translatable& operator=(Translatable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Translatable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Translatable* internal_default_instance() {
    return reinterpret_cast<const Translatable*>(
               &_Translatable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Translatable* other);
  friend void swap(Translatable& a, Translatable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Translatable* New() const final {
    return CreateMaybeMessage<Translatable>(NULL);
  }

  Translatable* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Translatable>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Translatable& from);
  void MergeFrom(const Translatable& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Translatable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string messageId = 1;
  void clear_messageid();
  static const int kMessageIdFieldNumber = 1;
  const ::std::string& messageid() const;
  void set_messageid(const ::std::string& value);
  #if LANG_CXX11
  void set_messageid(::std::string&& value);
  #endif
  void set_messageid(const char* value);
  void set_messageid(const char* value, size_t size);
  ::std::string* mutable_messageid();
  ::std::string* release_messageid();
  void set_allocated_messageid(::std::string* messageid);

  // string sender = 2;
  void clear_sender();
  static const int kSenderFieldNumber = 2;
  const ::std::string& sender() const;
  void set_sender(const ::std::string& value);
  #if LANG_CXX11
  void set_sender(::std::string&& value);
  #endif
  void set_sender(const char* value);
  void set_sender(const char* value, size_t size);
  ::std::string* mutable_sender();
  ::std::string* release_sender();
  void set_allocated_sender(::std::string* sender);

  // string fromLanguage = 3;
  void clear_fromlanguage();
  static const int kFromLanguageFieldNumber = 3;
  const ::std::string& fromlanguage() const;
  void set_fromlanguage(const ::std::string& value);
  #if LANG_CXX11
  void set_fromlanguage(::std::string&& value);
  #endif
  void set_fromlanguage(const char* value);
  void set_fromlanguage(const char* value, size_t size);
  ::std::string* mutable_fromlanguage();
  ::std::string* release_fromlanguage();
  void set_allocated_fromlanguage(::std::string* fromlanguage);

  // string toLanguage = 4;
  void clear_tolanguage();
  static const int kToLanguageFieldNumber = 4;
  const ::std::string& tolanguage() const;
  void set_tolanguage(const ::std::string& value);
  #if LANG_CXX11
  void set_tolanguage(::std::string&& value);
  #endif
  void set_tolanguage(const char* value);
  void set_tolanguage(const char* value, size_t size);
  ::std::string* mutable_tolanguage();
  ::std::string* release_tolanguage();
  void set_allocated_tolanguage(::std::string* tolanguage);

  // string message = 5;
  void clear_message();
  static const int kMessageFieldNumber = 5;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // string apiKey = 6;
  void clear_apikey();
  static const int kApiKeyFieldNumber = 6;
  const ::std::string& apikey() const;
  void set_apikey(const ::std::string& value);
  #if LANG_CXX11
  void set_apikey(::std::string&& value);
  #endif
  void set_apikey(const char* value);
  void set_apikey(const char* value, size_t size);
  ::std::string* mutable_apikey();
  ::std::string* release_apikey();
  void set_allocated_apikey(::std::string* apikey);

  // @@protoc_insertion_point(class_scope:Translatable)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr messageid_;
  ::google::protobuf::internal::ArenaStringPtr sender_;
  ::google::protobuf::internal::ArenaStringPtr fromlanguage_;
  ::google::protobuf::internal::ArenaStringPtr tolanguage_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::internal::ArenaStringPtr apikey_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_aiq_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Translation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Translation) */ {
 public:
  Translation();
  virtual ~Translation();

  Translation(const Translation& from);

  inline Translation& operator=(const Translation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Translation(Translation&& from) noexcept
    : Translation() {
    *this = ::std::move(from);
  }

  inline Translation& operator=(Translation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Translation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Translation* internal_default_instance() {
    return reinterpret_cast<const Translation*>(
               &_Translation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Translation* other);
  friend void swap(Translation& a, Translation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Translation* New() const final {
    return CreateMaybeMessage<Translation>(NULL);
  }

  Translation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Translation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Translation& from);
  void MergeFrom(const Translation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Translation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string messageId = 1;
  void clear_messageid();
  static const int kMessageIdFieldNumber = 1;
  const ::std::string& messageid() const;
  void set_messageid(const ::std::string& value);
  #if LANG_CXX11
  void set_messageid(::std::string&& value);
  #endif
  void set_messageid(const char* value);
  void set_messageid(const char* value, size_t size);
  ::std::string* mutable_messageid();
  ::std::string* release_messageid();
  void set_allocated_messageid(::std::string* messageid);

  // string sourceMessageId = 2;
  void clear_sourcemessageid();
  static const int kSourceMessageIdFieldNumber = 2;
  const ::std::string& sourcemessageid() const;
  void set_sourcemessageid(const ::std::string& value);
  #if LANG_CXX11
  void set_sourcemessageid(::std::string&& value);
  #endif
  void set_sourcemessageid(const char* value);
  void set_sourcemessageid(const char* value, size_t size);
  ::std::string* mutable_sourcemessageid();
  ::std::string* release_sourcemessageid();
  void set_allocated_sourcemessageid(::std::string* sourcemessageid);

  // string receiver = 3;
  void clear_receiver();
  static const int kReceiverFieldNumber = 3;
  const ::std::string& receiver() const;
  void set_receiver(const ::std::string& value);
  #if LANG_CXX11
  void set_receiver(::std::string&& value);
  #endif
  void set_receiver(const char* value);
  void set_receiver(const char* value, size_t size);
  ::std::string* mutable_receiver();
  ::std::string* release_receiver();
  void set_allocated_receiver(::std::string* receiver);

  // string sourceMessage = 4;
  void clear_sourcemessage();
  static const int kSourceMessageFieldNumber = 4;
  const ::std::string& sourcemessage() const;
  void set_sourcemessage(const ::std::string& value);
  #if LANG_CXX11
  void set_sourcemessage(::std::string&& value);
  #endif
  void set_sourcemessage(const char* value);
  void set_sourcemessage(const char* value, size_t size);
  ::std::string* mutable_sourcemessage();
  ::std::string* release_sourcemessage();
  void set_allocated_sourcemessage(::std::string* sourcemessage);

  // string translatedMessage = 5;
  void clear_translatedmessage();
  static const int kTranslatedMessageFieldNumber = 5;
  const ::std::string& translatedmessage() const;
  void set_translatedmessage(const ::std::string& value);
  #if LANG_CXX11
  void set_translatedmessage(::std::string&& value);
  #endif
  void set_translatedmessage(const char* value);
  void set_translatedmessage(const char* value, size_t size);
  ::std::string* mutable_translatedmessage();
  ::std::string* release_translatedmessage();
  void set_allocated_translatedmessage(::std::string* translatedmessage);

  // @@protoc_insertion_point(class_scope:Translation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr messageid_;
  ::google::protobuf::internal::ArenaStringPtr sourcemessageid_;
  ::google::protobuf::internal::ArenaStringPtr receiver_;
  ::google::protobuf::internal::ArenaStringPtr sourcemessage_;
  ::google::protobuf::internal::ArenaStringPtr translatedmessage_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_aiq_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Source : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Source) */ {
 public:
  Source();
  virtual ~Source();

  Source(const Source& from);

  inline Source& operator=(const Source& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Source(Source&& from) noexcept
    : Source() {
    *this = ::std::move(from);
  }

  inline Source& operator=(Source&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Source& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Source* internal_default_instance() {
    return reinterpret_cast<const Source*>(
               &_Source_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Source* other);
  friend void swap(Source& a, Source& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Source* New() const final {
    return CreateMaybeMessage<Source>(NULL);
  }

  Source* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Source>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Source& from);
  void MergeFrom(const Source& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Source* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string messageId = 1;
  void clear_messageid();
  static const int kMessageIdFieldNumber = 1;
  const ::std::string& messageid() const;
  void set_messageid(const ::std::string& value);
  #if LANG_CXX11
  void set_messageid(::std::string&& value);
  #endif
  void set_messageid(const char* value);
  void set_messageid(const char* value, size_t size);
  ::std::string* mutable_messageid();
  ::std::string* release_messageid();
  void set_allocated_messageid(::std::string* messageid);

  // string sender = 2;
  void clear_sender();
  static const int kSenderFieldNumber = 2;
  const ::std::string& sender() const;
  void set_sender(const ::std::string& value);
  #if LANG_CXX11
  void set_sender(::std::string&& value);
  #endif
  void set_sender(const char* value);
  void set_sender(const char* value, size_t size);
  ::std::string* mutable_sender();
  ::std::string* release_sender();
  void set_allocated_sender(::std::string* sender);

  // string message = 3;
  void clear_message();
  static const int kMessageFieldNumber = 3;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:Source)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr messageid_;
  ::google::protobuf::internal::ArenaStringPtr sender_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_aiq_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Language : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Language) */ {
 public:
  Language();
  virtual ~Language();

  Language(const Language& from);

  inline Language& operator=(const Language& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Language(Language&& from) noexcept
    : Language() {
    *this = ::std::move(from);
  }

  inline Language& operator=(Language&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Language& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Language* internal_default_instance() {
    return reinterpret_cast<const Language*>(
               &_Language_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Language* other);
  friend void swap(Language& a, Language& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Language* New() const final {
    return CreateMaybeMessage<Language>(NULL);
  }

  Language* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Language>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Language& from);
  void MergeFrom(const Language& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Language* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string messageId = 1;
  void clear_messageid();
  static const int kMessageIdFieldNumber = 1;
  const ::std::string& messageid() const;
  void set_messageid(const ::std::string& value);
  #if LANG_CXX11
  void set_messageid(::std::string&& value);
  #endif
  void set_messageid(const char* value);
  void set_messageid(const char* value, size_t size);
  ::std::string* mutable_messageid();
  ::std::string* release_messageid();
  void set_allocated_messageid(::std::string* messageid);

  // string sourceMessageId = 2;
  void clear_sourcemessageid();
  static const int kSourceMessageIdFieldNumber = 2;
  const ::std::string& sourcemessageid() const;
  void set_sourcemessageid(const ::std::string& value);
  #if LANG_CXX11
  void set_sourcemessageid(::std::string&& value);
  #endif
  void set_sourcemessageid(const char* value);
  void set_sourcemessageid(const char* value, size_t size);
  ::std::string* mutable_sourcemessageid();
  ::std::string* release_sourcemessageid();
  void set_allocated_sourcemessageid(::std::string* sourcemessageid);

  // string receiver = 3;
  void clear_receiver();
  static const int kReceiverFieldNumber = 3;
  const ::std::string& receiver() const;
  void set_receiver(const ::std::string& value);
  #if LANG_CXX11
  void set_receiver(::std::string&& value);
  #endif
  void set_receiver(const char* value);
  void set_receiver(const char* value, size_t size);
  ::std::string* mutable_receiver();
  ::std::string* release_receiver();
  void set_allocated_receiver(::std::string* receiver);

  // string sourceLanguage = 4;
  void clear_sourcelanguage();
  static const int kSourceLanguageFieldNumber = 4;
  const ::std::string& sourcelanguage() const;
  void set_sourcelanguage(const ::std::string& value);
  #if LANG_CXX11
  void set_sourcelanguage(::std::string&& value);
  #endif
  void set_sourcelanguage(const char* value);
  void set_sourcelanguage(const char* value, size_t size);
  ::std::string* mutable_sourcelanguage();
  ::std::string* release_sourcelanguage();
  void set_allocated_sourcelanguage(::std::string* sourcelanguage);

  // @@protoc_insertion_point(class_scope:Language)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr messageid_;
  ::google::protobuf::internal::ArenaStringPtr sourcemessageid_;
  ::google::protobuf::internal::ArenaStringPtr receiver_;
  ::google::protobuf::internal::ArenaStringPtr sourcelanguage_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_aiq_5fserver_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Translatable

// string messageId = 1;
inline void Translatable::clear_messageid() {
  messageid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Translatable::messageid() const {
  // @@protoc_insertion_point(field_get:Translatable.messageId)
  return messageid_.GetNoArena();
}
inline void Translatable::set_messageid(const ::std::string& value) {
  
  messageid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Translatable.messageId)
}
#if LANG_CXX11
inline void Translatable::set_messageid(::std::string&& value) {
  
  messageid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Translatable.messageId)
}
#endif
inline void Translatable::set_messageid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  messageid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Translatable.messageId)
}
inline void Translatable::set_messageid(const char* value, size_t size) {
  
  messageid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Translatable.messageId)
}
inline ::std::string* Translatable::mutable_messageid() {
  
  // @@protoc_insertion_point(field_mutable:Translatable.messageId)
  return messageid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Translatable::release_messageid() {
  // @@protoc_insertion_point(field_release:Translatable.messageId)
  
  return messageid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Translatable::set_allocated_messageid(::std::string* messageid) {
  if (messageid != NULL) {
    
  } else {
    
  }
  messageid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), messageid);
  // @@protoc_insertion_point(field_set_allocated:Translatable.messageId)
}

// string sender = 2;
inline void Translatable::clear_sender() {
  sender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Translatable::sender() const {
  // @@protoc_insertion_point(field_get:Translatable.sender)
  return sender_.GetNoArena();
}
inline void Translatable::set_sender(const ::std::string& value) {
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Translatable.sender)
}
#if LANG_CXX11
inline void Translatable::set_sender(::std::string&& value) {
  
  sender_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Translatable.sender)
}
#endif
inline void Translatable::set_sender(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Translatable.sender)
}
inline void Translatable::set_sender(const char* value, size_t size) {
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Translatable.sender)
}
inline ::std::string* Translatable::mutable_sender() {
  
  // @@protoc_insertion_point(field_mutable:Translatable.sender)
  return sender_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Translatable::release_sender() {
  // @@protoc_insertion_point(field_release:Translatable.sender)
  
  return sender_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Translatable::set_allocated_sender(::std::string* sender) {
  if (sender != NULL) {
    
  } else {
    
  }
  sender_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender);
  // @@protoc_insertion_point(field_set_allocated:Translatable.sender)
}

// string fromLanguage = 3;
inline void Translatable::clear_fromlanguage() {
  fromlanguage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Translatable::fromlanguage() const {
  // @@protoc_insertion_point(field_get:Translatable.fromLanguage)
  return fromlanguage_.GetNoArena();
}
inline void Translatable::set_fromlanguage(const ::std::string& value) {
  
  fromlanguage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Translatable.fromLanguage)
}
#if LANG_CXX11
inline void Translatable::set_fromlanguage(::std::string&& value) {
  
  fromlanguage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Translatable.fromLanguage)
}
#endif
inline void Translatable::set_fromlanguage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fromlanguage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Translatable.fromLanguage)
}
inline void Translatable::set_fromlanguage(const char* value, size_t size) {
  
  fromlanguage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Translatable.fromLanguage)
}
inline ::std::string* Translatable::mutable_fromlanguage() {
  
  // @@protoc_insertion_point(field_mutable:Translatable.fromLanguage)
  return fromlanguage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Translatable::release_fromlanguage() {
  // @@protoc_insertion_point(field_release:Translatable.fromLanguage)
  
  return fromlanguage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Translatable::set_allocated_fromlanguage(::std::string* fromlanguage) {
  if (fromlanguage != NULL) {
    
  } else {
    
  }
  fromlanguage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fromlanguage);
  // @@protoc_insertion_point(field_set_allocated:Translatable.fromLanguage)
}

// string toLanguage = 4;
inline void Translatable::clear_tolanguage() {
  tolanguage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Translatable::tolanguage() const {
  // @@protoc_insertion_point(field_get:Translatable.toLanguage)
  return tolanguage_.GetNoArena();
}
inline void Translatable::set_tolanguage(const ::std::string& value) {
  
  tolanguage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Translatable.toLanguage)
}
#if LANG_CXX11
inline void Translatable::set_tolanguage(::std::string&& value) {
  
  tolanguage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Translatable.toLanguage)
}
#endif
inline void Translatable::set_tolanguage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tolanguage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Translatable.toLanguage)
}
inline void Translatable::set_tolanguage(const char* value, size_t size) {
  
  tolanguage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Translatable.toLanguage)
}
inline ::std::string* Translatable::mutable_tolanguage() {
  
  // @@protoc_insertion_point(field_mutable:Translatable.toLanguage)
  return tolanguage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Translatable::release_tolanguage() {
  // @@protoc_insertion_point(field_release:Translatable.toLanguage)
  
  return tolanguage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Translatable::set_allocated_tolanguage(::std::string* tolanguage) {
  if (tolanguage != NULL) {
    
  } else {
    
  }
  tolanguage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tolanguage);
  // @@protoc_insertion_point(field_set_allocated:Translatable.toLanguage)
}

// string message = 5;
inline void Translatable::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Translatable::message() const {
  // @@protoc_insertion_point(field_get:Translatable.message)
  return message_.GetNoArena();
}
inline void Translatable::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Translatable.message)
}
#if LANG_CXX11
inline void Translatable::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Translatable.message)
}
#endif
inline void Translatable::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Translatable.message)
}
inline void Translatable::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Translatable.message)
}
inline ::std::string* Translatable::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:Translatable.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Translatable::release_message() {
  // @@protoc_insertion_point(field_release:Translatable.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Translatable::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:Translatable.message)
}

// string apiKey = 6;
inline void Translatable::clear_apikey() {
  apikey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Translatable::apikey() const {
  // @@protoc_insertion_point(field_get:Translatable.apiKey)
  return apikey_.GetNoArena();
}
inline void Translatable::set_apikey(const ::std::string& value) {
  
  apikey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Translatable.apiKey)
}
#if LANG_CXX11
inline void Translatable::set_apikey(::std::string&& value) {
  
  apikey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Translatable.apiKey)
}
#endif
inline void Translatable::set_apikey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  apikey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Translatable.apiKey)
}
inline void Translatable::set_apikey(const char* value, size_t size) {
  
  apikey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Translatable.apiKey)
}
inline ::std::string* Translatable::mutable_apikey() {
  
  // @@protoc_insertion_point(field_mutable:Translatable.apiKey)
  return apikey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Translatable::release_apikey() {
  // @@protoc_insertion_point(field_release:Translatable.apiKey)
  
  return apikey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Translatable::set_allocated_apikey(::std::string* apikey) {
  if (apikey != NULL) {
    
  } else {
    
  }
  apikey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), apikey);
  // @@protoc_insertion_point(field_set_allocated:Translatable.apiKey)
}

// -------------------------------------------------------------------

// Translation

// string messageId = 1;
inline void Translation::clear_messageid() {
  messageid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Translation::messageid() const {
  // @@protoc_insertion_point(field_get:Translation.messageId)
  return messageid_.GetNoArena();
}
inline void Translation::set_messageid(const ::std::string& value) {
  
  messageid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Translation.messageId)
}
#if LANG_CXX11
inline void Translation::set_messageid(::std::string&& value) {
  
  messageid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Translation.messageId)
}
#endif
inline void Translation::set_messageid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  messageid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Translation.messageId)
}
inline void Translation::set_messageid(const char* value, size_t size) {
  
  messageid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Translation.messageId)
}
inline ::std::string* Translation::mutable_messageid() {
  
  // @@protoc_insertion_point(field_mutable:Translation.messageId)
  return messageid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Translation::release_messageid() {
  // @@protoc_insertion_point(field_release:Translation.messageId)
  
  return messageid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Translation::set_allocated_messageid(::std::string* messageid) {
  if (messageid != NULL) {
    
  } else {
    
  }
  messageid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), messageid);
  // @@protoc_insertion_point(field_set_allocated:Translation.messageId)
}

// string sourceMessageId = 2;
inline void Translation::clear_sourcemessageid() {
  sourcemessageid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Translation::sourcemessageid() const {
  // @@protoc_insertion_point(field_get:Translation.sourceMessageId)
  return sourcemessageid_.GetNoArena();
}
inline void Translation::set_sourcemessageid(const ::std::string& value) {
  
  sourcemessageid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Translation.sourceMessageId)
}
#if LANG_CXX11
inline void Translation::set_sourcemessageid(::std::string&& value) {
  
  sourcemessageid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Translation.sourceMessageId)
}
#endif
inline void Translation::set_sourcemessageid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sourcemessageid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Translation.sourceMessageId)
}
inline void Translation::set_sourcemessageid(const char* value, size_t size) {
  
  sourcemessageid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Translation.sourceMessageId)
}
inline ::std::string* Translation::mutable_sourcemessageid() {
  
  // @@protoc_insertion_point(field_mutable:Translation.sourceMessageId)
  return sourcemessageid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Translation::release_sourcemessageid() {
  // @@protoc_insertion_point(field_release:Translation.sourceMessageId)
  
  return sourcemessageid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Translation::set_allocated_sourcemessageid(::std::string* sourcemessageid) {
  if (sourcemessageid != NULL) {
    
  } else {
    
  }
  sourcemessageid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sourcemessageid);
  // @@protoc_insertion_point(field_set_allocated:Translation.sourceMessageId)
}

// string receiver = 3;
inline void Translation::clear_receiver() {
  receiver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Translation::receiver() const {
  // @@protoc_insertion_point(field_get:Translation.receiver)
  return receiver_.GetNoArena();
}
inline void Translation::set_receiver(const ::std::string& value) {
  
  receiver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Translation.receiver)
}
#if LANG_CXX11
inline void Translation::set_receiver(::std::string&& value) {
  
  receiver_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Translation.receiver)
}
#endif
inline void Translation::set_receiver(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  receiver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Translation.receiver)
}
inline void Translation::set_receiver(const char* value, size_t size) {
  
  receiver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Translation.receiver)
}
inline ::std::string* Translation::mutable_receiver() {
  
  // @@protoc_insertion_point(field_mutable:Translation.receiver)
  return receiver_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Translation::release_receiver() {
  // @@protoc_insertion_point(field_release:Translation.receiver)
  
  return receiver_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Translation::set_allocated_receiver(::std::string* receiver) {
  if (receiver != NULL) {
    
  } else {
    
  }
  receiver_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), receiver);
  // @@protoc_insertion_point(field_set_allocated:Translation.receiver)
}

// string sourceMessage = 4;
inline void Translation::clear_sourcemessage() {
  sourcemessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Translation::sourcemessage() const {
  // @@protoc_insertion_point(field_get:Translation.sourceMessage)
  return sourcemessage_.GetNoArena();
}
inline void Translation::set_sourcemessage(const ::std::string& value) {
  
  sourcemessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Translation.sourceMessage)
}
#if LANG_CXX11
inline void Translation::set_sourcemessage(::std::string&& value) {
  
  sourcemessage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Translation.sourceMessage)
}
#endif
inline void Translation::set_sourcemessage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sourcemessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Translation.sourceMessage)
}
inline void Translation::set_sourcemessage(const char* value, size_t size) {
  
  sourcemessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Translation.sourceMessage)
}
inline ::std::string* Translation::mutable_sourcemessage() {
  
  // @@protoc_insertion_point(field_mutable:Translation.sourceMessage)
  return sourcemessage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Translation::release_sourcemessage() {
  // @@protoc_insertion_point(field_release:Translation.sourceMessage)
  
  return sourcemessage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Translation::set_allocated_sourcemessage(::std::string* sourcemessage) {
  if (sourcemessage != NULL) {
    
  } else {
    
  }
  sourcemessage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sourcemessage);
  // @@protoc_insertion_point(field_set_allocated:Translation.sourceMessage)
}

// string translatedMessage = 5;
inline void Translation::clear_translatedmessage() {
  translatedmessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Translation::translatedmessage() const {
  // @@protoc_insertion_point(field_get:Translation.translatedMessage)
  return translatedmessage_.GetNoArena();
}
inline void Translation::set_translatedmessage(const ::std::string& value) {
  
  translatedmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Translation.translatedMessage)
}
#if LANG_CXX11
inline void Translation::set_translatedmessage(::std::string&& value) {
  
  translatedmessage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Translation.translatedMessage)
}
#endif
inline void Translation::set_translatedmessage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  translatedmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Translation.translatedMessage)
}
inline void Translation::set_translatedmessage(const char* value, size_t size) {
  
  translatedmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Translation.translatedMessage)
}
inline ::std::string* Translation::mutable_translatedmessage() {
  
  // @@protoc_insertion_point(field_mutable:Translation.translatedMessage)
  return translatedmessage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Translation::release_translatedmessage() {
  // @@protoc_insertion_point(field_release:Translation.translatedMessage)
  
  return translatedmessage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Translation::set_allocated_translatedmessage(::std::string* translatedmessage) {
  if (translatedmessage != NULL) {
    
  } else {
    
  }
  translatedmessage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), translatedmessage);
  // @@protoc_insertion_point(field_set_allocated:Translation.translatedMessage)
}

// -------------------------------------------------------------------

// Source

// string messageId = 1;
inline void Source::clear_messageid() {
  messageid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Source::messageid() const {
  // @@protoc_insertion_point(field_get:Source.messageId)
  return messageid_.GetNoArena();
}
inline void Source::set_messageid(const ::std::string& value) {
  
  messageid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Source.messageId)
}
#if LANG_CXX11
inline void Source::set_messageid(::std::string&& value) {
  
  messageid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Source.messageId)
}
#endif
inline void Source::set_messageid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  messageid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Source.messageId)
}
inline void Source::set_messageid(const char* value, size_t size) {
  
  messageid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Source.messageId)
}
inline ::std::string* Source::mutable_messageid() {
  
  // @@protoc_insertion_point(field_mutable:Source.messageId)
  return messageid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Source::release_messageid() {
  // @@protoc_insertion_point(field_release:Source.messageId)
  
  return messageid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Source::set_allocated_messageid(::std::string* messageid) {
  if (messageid != NULL) {
    
  } else {
    
  }
  messageid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), messageid);
  // @@protoc_insertion_point(field_set_allocated:Source.messageId)
}

// string sender = 2;
inline void Source::clear_sender() {
  sender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Source::sender() const {
  // @@protoc_insertion_point(field_get:Source.sender)
  return sender_.GetNoArena();
}
inline void Source::set_sender(const ::std::string& value) {
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Source.sender)
}
#if LANG_CXX11
inline void Source::set_sender(::std::string&& value) {
  
  sender_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Source.sender)
}
#endif
inline void Source::set_sender(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Source.sender)
}
inline void Source::set_sender(const char* value, size_t size) {
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Source.sender)
}
inline ::std::string* Source::mutable_sender() {
  
  // @@protoc_insertion_point(field_mutable:Source.sender)
  return sender_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Source::release_sender() {
  // @@protoc_insertion_point(field_release:Source.sender)
  
  return sender_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Source::set_allocated_sender(::std::string* sender) {
  if (sender != NULL) {
    
  } else {
    
  }
  sender_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender);
  // @@protoc_insertion_point(field_set_allocated:Source.sender)
}

// string message = 3;
inline void Source::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Source::message() const {
  // @@protoc_insertion_point(field_get:Source.message)
  return message_.GetNoArena();
}
inline void Source::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Source.message)
}
#if LANG_CXX11
inline void Source::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Source.message)
}
#endif
inline void Source::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Source.message)
}
inline void Source::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Source.message)
}
inline ::std::string* Source::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:Source.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Source::release_message() {
  // @@protoc_insertion_point(field_release:Source.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Source::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:Source.message)
}

// -------------------------------------------------------------------

// Language

// string messageId = 1;
inline void Language::clear_messageid() {
  messageid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Language::messageid() const {
  // @@protoc_insertion_point(field_get:Language.messageId)
  return messageid_.GetNoArena();
}
inline void Language::set_messageid(const ::std::string& value) {
  
  messageid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Language.messageId)
}
#if LANG_CXX11
inline void Language::set_messageid(::std::string&& value) {
  
  messageid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Language.messageId)
}
#endif
inline void Language::set_messageid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  messageid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Language.messageId)
}
inline void Language::set_messageid(const char* value, size_t size) {
  
  messageid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Language.messageId)
}
inline ::std::string* Language::mutable_messageid() {
  
  // @@protoc_insertion_point(field_mutable:Language.messageId)
  return messageid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Language::release_messageid() {
  // @@protoc_insertion_point(field_release:Language.messageId)
  
  return messageid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Language::set_allocated_messageid(::std::string* messageid) {
  if (messageid != NULL) {
    
  } else {
    
  }
  messageid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), messageid);
  // @@protoc_insertion_point(field_set_allocated:Language.messageId)
}

// string sourceMessageId = 2;
inline void Language::clear_sourcemessageid() {
  sourcemessageid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Language::sourcemessageid() const {
  // @@protoc_insertion_point(field_get:Language.sourceMessageId)
  return sourcemessageid_.GetNoArena();
}
inline void Language::set_sourcemessageid(const ::std::string& value) {
  
  sourcemessageid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Language.sourceMessageId)
}
#if LANG_CXX11
inline void Language::set_sourcemessageid(::std::string&& value) {
  
  sourcemessageid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Language.sourceMessageId)
}
#endif
inline void Language::set_sourcemessageid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sourcemessageid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Language.sourceMessageId)
}
inline void Language::set_sourcemessageid(const char* value, size_t size) {
  
  sourcemessageid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Language.sourceMessageId)
}
inline ::std::string* Language::mutable_sourcemessageid() {
  
  // @@protoc_insertion_point(field_mutable:Language.sourceMessageId)
  return sourcemessageid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Language::release_sourcemessageid() {
  // @@protoc_insertion_point(field_release:Language.sourceMessageId)
  
  return sourcemessageid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Language::set_allocated_sourcemessageid(::std::string* sourcemessageid) {
  if (sourcemessageid != NULL) {
    
  } else {
    
  }
  sourcemessageid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sourcemessageid);
  // @@protoc_insertion_point(field_set_allocated:Language.sourceMessageId)
}

// string receiver = 3;
inline void Language::clear_receiver() {
  receiver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Language::receiver() const {
  // @@protoc_insertion_point(field_get:Language.receiver)
  return receiver_.GetNoArena();
}
inline void Language::set_receiver(const ::std::string& value) {
  
  receiver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Language.receiver)
}
#if LANG_CXX11
inline void Language::set_receiver(::std::string&& value) {
  
  receiver_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Language.receiver)
}
#endif
inline void Language::set_receiver(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  receiver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Language.receiver)
}
inline void Language::set_receiver(const char* value, size_t size) {
  
  receiver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Language.receiver)
}
inline ::std::string* Language::mutable_receiver() {
  
  // @@protoc_insertion_point(field_mutable:Language.receiver)
  return receiver_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Language::release_receiver() {
  // @@protoc_insertion_point(field_release:Language.receiver)
  
  return receiver_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Language::set_allocated_receiver(::std::string* receiver) {
  if (receiver != NULL) {
    
  } else {
    
  }
  receiver_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), receiver);
  // @@protoc_insertion_point(field_set_allocated:Language.receiver)
}

// string sourceLanguage = 4;
inline void Language::clear_sourcelanguage() {
  sourcelanguage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Language::sourcelanguage() const {
  // @@protoc_insertion_point(field_get:Language.sourceLanguage)
  return sourcelanguage_.GetNoArena();
}
inline void Language::set_sourcelanguage(const ::std::string& value) {
  
  sourcelanguage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Language.sourceLanguage)
}
#if LANG_CXX11
inline void Language::set_sourcelanguage(::std::string&& value) {
  
  sourcelanguage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Language.sourceLanguage)
}
#endif
inline void Language::set_sourcelanguage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sourcelanguage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Language.sourceLanguage)
}
inline void Language::set_sourcelanguage(const char* value, size_t size) {
  
  sourcelanguage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Language.sourceLanguage)
}
inline ::std::string* Language::mutable_sourcelanguage() {
  
  // @@protoc_insertion_point(field_mutable:Language.sourceLanguage)
  return sourcelanguage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Language::release_sourcelanguage() {
  // @@protoc_insertion_point(field_release:Language.sourceLanguage)
  
  return sourcelanguage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Language::set_allocated_sourcelanguage(::std::string* sourcelanguage) {
  if (sourcelanguage != NULL) {
    
  } else {
    
  }
  sourcelanguage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sourcelanguage);
  // @@protoc_insertion_point(field_set_allocated:Language.sourceLanguage)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_aiq_5fserver_2eproto
